# Define o número de workers com base nos cores de CPU disponíveis. Ótimo padrão.
worker_processes auto;

# Local do arquivo de PID
pid /var/run/nginx.pid;

events {
    # Número alto de conexões por worker, ideal para a carga da Rinha.
    worker_connections 4096;
}

http {
    # --- Otimizações de Performance e Segurança ---

    # Desliga completamente o log de acesso para economizar I/O.
    access_log off;

    # Não envia a versão do Nginx nos cabeçalhos de resposta. Leve ganho de segurança e performance.
    server_tokens off;

    # Otimiza a forma como o Nginx envia arquivos pelo sistema.
    sendfile on;

    # Agrupa pacotes para otimizar o envio. Funciona em conjunto com sendfile.
    tcp_nopush on;

    # --- Configurações da Aplicação ---

    # DNS Resolver do Docker, essencial para o Lua e upstreams dinâmicos.
    resolver 127.0.0.11 valid=5s;

    upstream java_apis {
        server api01:9998;
        server api02:9998;

        # Mantém 32 conexões ociosas abertas para cada worker,
        # prontas para reutilização. Essencial para baixa latência.
        keepalive 32;
    }

    server {
        listen 9999;
        
        # Envia pacotes imediatamente. Ótimo para baixa latência em APIs.
        tcp_nodelay on;

        # Rota de enfileiramento de alta velocidade
        location = /payments {
            content_by_lua_file /usr/local/openresty/nginx/scripts/enqueue_payment.lua;
        }

        # Rota para os endpoints da API Java (summary e purge)
        location ~ ^/(payments-summary|purge-payments)$ {
            proxy_pass http://java_apis;
            proxy_http_version 1.1;

            # Configuração padrão e estável para reutilizar conexões (keepalive)
            # com o upstream.
            proxy_set_header Connection "Keep-Alive";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }
}
