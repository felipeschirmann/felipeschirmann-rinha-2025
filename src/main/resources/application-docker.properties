# --- Configurações para o ambiente de produção/Rinha (perfil 'docker') ---
# Cada propriedade busca uma variável de ambiente e, se não encontrar, usa um valor padrão seguro.

# Endereços dos processadores de pagamento na rede do Docker
processor.default.url=${PROCESSOR_DEFAULT_URL:http://payment-processor-default:8080}
processor.fallback.url=${PROCESSOR_FALLBACK_URL:http://payment-processor-fallback:8080}

# Endereço do Redis na rede do Docker
spring.data.redis.host=${SPRING_DATA_REDIS_HOST:redis}
spring.data.redis.port=${SPRING_DATA_REDIS_PORT:6379}

# --- PARÂMETROS DE TUNING ---

# Período (em ms) para reavaliar a estratégia de roteamento
rinha.scheduler.strategy-decision-period-ms=${RINHA_SCHEDULER_STRATEGY_DECISION_PERIOD_MS:1000}

# Período (em ms) para escrever os lotes no Redis
rinha.scheduler.redis-batch-period-ms=${RINHA_SCHEDULER_REDIS_BATCH_PERIOD_MS:100}

# Tamanho máximo da fila de pagamentos no Redis
rinha.queue.max-size=${RINHA_QUEUE_MAX_SIZE:50000}

# --- PARÂMETROS DE PERFORMANCE DO CLIENTE HTTP ---

# Número máximo de conexões no pool do Apache HttpClient (usado pelo RestClient)
rinha.webclient.max-connections=${RINHA_WEBCLIENT_MAX_CONNECTIONS:250}

# Timeout em ms para estabelecer a conexão
rinha.webclient.connect-timeout-ms=${RINHA_WEBCLIENT_CONNECT_TIMEOUT_MS:2000}

# Timeout em segundos para receber a resposta completa
rinha.webclient.response-timeout-sec=${RINHA_WEBCLIENT_RESPONSE_TIMEOUT_SEC:10}

# A propriedade pending-acquire-max-count é específica do WebClient com Reactor Netty.
# Para o Apache HttpClient, o controle é feito pelo max-connections.
# Mantemos a propriedade para consistência, caso decida usar o WebClient no futuro.
rinha.webclient.pending-acquire-max-count=${RINHA_WEBCLIENT_PENDING_ACQUIRE_MAX_COUNT:1000}